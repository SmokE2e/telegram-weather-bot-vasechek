require('dotenv').config()
const TelegramBot = require('node-telegram-bot-api')
const axios = require('axios')
const moment = require('moment-timezone')
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const OPENWEATHERMAP_API_KEY = process.env.OPENWEATHERMAP_API_KEY
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true })
const storage = {}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id 

  bot.sendMessage(
      chatId,
      '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
      {
        reply_markup: {
          keyboard: [
            ['‚òÄÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É', '‚è≥ –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è'], 
            ['‚õîÔ∏è –°—Ç–æ–ø', 'üÜò –ü–æ–º–æ—â—å'], 
          ],
          resize_keyboard: true, 
          one_time_keyboard: false, 
        },
      }
  )
})

bot.on('message', async (msg) => {
  const chatId = msg.chat.id 
  const text = msg.text 

  if (text === '‚òÄÔ∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É') {
    const userData = getUserData(chatId) 
    userData.waitingForCity = true 
    userData.waitingForWeather = true 
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–°—Ç–æ–ø" –¥–ª—è –æ—Ç–º–µ–Ω—ã:')
  } else if (text === '‚è≥ –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è') {
    const userData = getUserData(chatId) 
    userData.waitingForCity = true 
    userData.waitingForTime = true 
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–°—Ç–æ–ø" –¥–ª—è –æ—Ç–º–µ–Ω—ã:')
  } else if (text === '‚õîÔ∏è –°—Ç–æ–ø') {
    bot.sendMessage(chatId, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:')
    resetUserData(chatId) 
  } else if (text === 'üÜò –ü–æ–º–æ—â—å') {
    bot.sendMessage(chatId, '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—é.')
  } else {
   
    const userData = getUserData(chatId)
    if (userData && userData.waitingForCity) {
      const city = text 
      let messageText = ''
      try {
        if (userData.waitingForWeather) {
          messageText = await getWeatherData(city) 
        } else if (userData.waitingForTime) {
          messageText = await getTimeData(city) 
        }
        bot.sendMessage(chatId, messageText) 
      } catch (error) {
        if (error.response && error.response.status === 404) {
          bot.sendMessage(chatId, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        } else {
          bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`)
        }
      }
      resetUserData(chatId) 
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:')
    }
  }
})

async function getWeatherData(city) {

  const response = await axios.get(
      `http://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&lang=ru&appid=${OPENWEATHERMAP_API_KEY}`
  )
  const weatherData = response.data 
  const temperature = Math.round(weatherData.main.temp - 273.15) 
  return `–ü–æ–≥–æ–¥–∞ –≤ ${city}: ${weatherData.weather[0].description}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${temperature}¬∞C.` 
}

async function getTimeData(city) {
  const response = await axios.get(
      `http://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&lang=ru&appid=${OPENWEATHERMAP_API_KEY}`
  )
  const timezone = response.data.timezone 
  const time = moment().utcOffset(timezone / 60).format('HH:mm') 
  return `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ ${city}: ${time}.`
}

function getUserData(chatId) {
  let userData = storage[chatId] 
  if (!userData) {
    userData = {
      waitingForCity: false, 
      waitingForWeather: false, 
      waitingForTime: false, 
    }
    storage[chatId] = userData 
  }
  return userData
}

function resetUserData(chatId) {
  const userData = getUserData(chatId) 
  userData.waitingForCity = false 
  userData.waitingForWeather = false 
  userData.waitingForTime = false 
}
